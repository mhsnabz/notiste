package iste.not.com.POST;import android.content.Context;import android.content.DialogInterface;import android.content.Intent;import android.graphics.Canvas;import android.support.annotation.NonNull;import android.support.annotation.Nullable;import android.support.v7.app.AlertDialog;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.support.v7.widget.GridLayoutManager;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.support.v7.widget.StaggeredGridLayoutManager;import android.support.v7.widget.helper.ItemTouchHelper;import android.text.TextUtils;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.ImageButton;import android.widget.ImageView;import android.widget.LinearLayout;import android.widget.ProgressBar;import android.widget.TextView;import com.firebase.ui.database.FirebaseRecyclerAdapter;import com.firebase.ui.database.FirebaseRecyclerOptions;import com.google.android.gms.tasks.OnCompleteListener;import com.google.android.gms.tasks.Task;import com.google.firebase.auth.FirebaseAuth;import com.google.firebase.auth.FirebaseUser;import com.google.firebase.database.ChildEventListener;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.database.Query;import com.google.firebase.database.ValueEventListener;import com.nostra13.universalimageloader.core.ImageLoader;import com.rengwuxian.materialedittext.MaterialEditText;import com.squareup.picasso.Callback;import com.squareup.picasso.NetworkPolicy;import com.squareup.picasso.Picasso;import java.util.ArrayList;import java.util.Calendar;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Random;import de.hdodenhof.circleimageview.CircleImageView;import iste.not.com.Main.MainActivity;import iste.not.com.Main.askNoteHelper.Notes;import iste.not.com.POST.CommentHelper.CommentAdapter;import iste.not.com.POST.CommentHelper.CommentHelper;import iste.not.com.POST.CommentHelper.SwipeController;import iste.not.com.POST.CommentHelper.SwipeControllerActions;import iste.not.com.Profile.NotificationActivity;import iste.not.com.R;public class SingleLessonsPostActivity extends AppCompatActivity {    String  key;    long count;    SwipeController swipeController = null;    private static final String ALLOWED_CHARACTERS ="-_0123456789qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM+";    MaterialEditText comment_editText;    ImageButton sendButton;    private RecyclerView notes,commentRec;    String  current_user,userid,_lessonName,_dersHakkinde,major,_time;    TextView username,lessonName,likecount,commentCount,time;    CircleImageView profileImage;    DatabaseReference databaseReference;    Context context = this;    RecyclerView.LayoutManager manager;    ArrayList<String> images;    FirebaseUser user= FirebaseAuth.getInstance().getCurrentUser();    String query;    List<CommentHelper> comment = new ArrayList<>();    CommentAdapter commentAdapter;    String pushId;    String senderName;    String contextIntent;    TextView yorum,datasCount;    FirebaseUser firebaseUser = FirebaseAuth.getInstance().getCurrentUser();    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_single_lessons_post);        contextIntent = getIntent().getStringExtra("context");        commentRec=(RecyclerView)findViewById(R.id.commentRec);        sendButton=(ImageButton)findViewById(R.id.sendButton);        current_user=firebaseUser.getUid();        comment_editText=(MaterialEditText)findViewById(R.id.comment_edittext);        yorum=(TextView)findViewById(R.id.yorum);        yorum.setText(getIntent().getStringExtra("comment"));        key =getIntent().getStringExtra("key");        userid=getIntent().getStringExtra("user_id");        count=getIntent().getLongExtra("count",count);        _lessonName=getIntent().getStringExtra("lessonName");        _dersHakkinde=getIntent().getStringExtra("dersHakkinda");        query=getIntent().getStringExtra("query");        major=getIntent().getStringExtra("major");        _time=getIntent().getStringExtra("time");      //  notes=(RecyclerView)findViewById(R.id.data_recyclerView);        time=(TextView)findViewById(R.id.time);        time.setText(_time);       images= new ArrayList<>();       datasCount=(TextView)findViewById(R.id.datasCount);       datasCount.setText((int) count + " Tane Dosya");       //notes.setHasFixedSize(true);       commentAdapter = new CommentAdapter(comment,major);       commentRec.setAdapter(commentAdapter);        LinearLayoutManager manager1 = new LinearLayoutManager(this);        commentRec.setHasFixedSize(true);        commentRec.setLayoutManager(manager1);        setupRecyclerView(commentRec);        final ImageView liked = (ImageView)findViewById(R.id.liked);        setCommentVisibility(major,key,query);        setLikedVisibility(major,key,query);        liked.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                deleteLiked(major,key,query);            }        });        final ImageView not_like = (ImageView)findViewById(R.id.like);        not_like.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View view) {                setLike(major,current_user,key,query,userid);                sendLike(key,current_user);            }        });   setPoster(userid);        setCommentLayout(key);      // notes.notifyAll();      // notes.setLayoutManager(new GridLayoutManager(SingleLessonsPostActivity.this,1));       // mProductListRecyclerView.setLayoutManager(isViewWithCatalog ? new LinearLayoutManager(this) : new StaggeredGridLayoutManager(2, StaggeredGridLayoutManager.VERTICAL));        username=(TextView)findViewById(R.id.username);        profileImage=(CircleImageView)findViewById(R.id.profilePic);        likecount=(TextView)findViewById(R.id.likeCount);        commentCount=(TextView)findViewById(R.id.comemntCount);        lessonName=(TextView)findViewById(R.id.lessonName);        lessonName.setText(_lessonName);        getNotes(major,key);        sendButton.setOnClickListener(new View.OnClickListener()        {            @Override            public void onClick(View view)            {                sendComment(key,current_user);            }        });        databaseReference=FirebaseDatabase.getInstance().getReference().child(query)                .child(key).child("data");    }    private void setPoster(String _userId)    {        DatabaseReference databaseReference = FirebaseDatabase.getInstance().getReference().child("Students").child(_userId);        databaseReference.addValueEventListener(new ValueEventListener() {            @Override            public void onDataChange(@NonNull final DataSnapshot dataSnapshot) {                username.setText(dataSnapshot.child("name").getValue().toString());                Picasso.get().load(dataSnapshot.child("image").getValue().toString())                        .networkPolicy(NetworkPolicy.OFFLINE)                        .resize(512,512)                        .centerCrop()                        .into(profileImage, new Callback() {                            @Override                            public void onSuccess() {                            }                            @Override                            public void onError(Exception e) {                                Picasso.get().load(dataSnapshot.child("image").getValue().toString())                                        .resize(512,512)                                        .centerCrop()                                        .into(profileImage);                            }                        });            }            @Override            public void onCancelled(@NonNull DatabaseError databaseError) {            }        });    }    public void setLike(final String _major, final String _currentUser, final String _lessonKey, final String query, String _userId)    {        final ImageView not_like = (ImageView)findViewById(R.id.like);        final ImageView liked = (ImageView)findViewById(R.id.liked);        if (_userId.equals(_currentUser)) {            AlertDialog.Builder b = new AlertDialog.Builder(this);            b.setTitle("Kral Aramızda Kalacak ");            b.setMessage("Kendi Gönderini Beğenmek İstiyor Musun? ");            b.setPositiveButton("Evet Çok Güzelim", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    final DatabaseReference likeReference = FirebaseDatabase.getInstance().getReference().child(_major)                            .child(query).child(_lessonKey);                    likeReference.addListenerForSingleValueEvent(new ValueEventListener() {                        @Override                        public void onDataChange(@NonNull DataSnapshot dataSnapshot) {                            likeReference.child("Likes").push().child("likedId").setValue(_currentUser).addOnCompleteListener(new OnCompleteListener<Void>() {                                @Override                                public void onComplete(@NonNull Task<Void> task) {                                    if (task.isSuccessful()) {                                        Log.d("like", "onComplete: " + "like eklendi");                                    }                                }                            });                        }                        @Override                        public void onCancelled(@NonNull DatabaseError databaseError) {                        }                    });                }            });            b.setNegativeButton("Hayır Çok Yakışıklıyım", new DialogInterface.OnClickListener() {                @Override                public void onClick(DialogInterface dialog, int which) {                    final DatabaseReference likeReference = FirebaseDatabase.getInstance().getReference().child(_major)                            .child(query).child(_lessonKey);                    likeReference.addListenerForSingleValueEvent(new ValueEventListener() {                        @Override                        public void onDataChange(@NonNull DataSnapshot dataSnapshot) {                            likeReference.child("Likes").push().child("likedId").setValue(_currentUser).addOnCompleteListener(new OnCompleteListener<Void>() {                                @Override                                public void onComplete(@NonNull Task<Void> task) {                                    if (task.isSuccessful()) {                                        Log.d("like", "onComplete: " + "like eklendi");                                    }                                }                            });                        }                        @Override                        public void onCancelled(@NonNull DatabaseError databaseError) {                        }                    });                }            });            AlertDialog alert = b.create();            alert.setCanceledOnTouchOutside(false);            alert.setIcon(R.drawable.kral);            alert.show();        }        else        {            final DatabaseReference likeReference = FirebaseDatabase.getInstance().getReference().child(_major)                    .child(query).child(_lessonKey);            likeReference.addListenerForSingleValueEvent(new ValueEventListener() {                @Override                public void onDataChange(@NonNull DataSnapshot dataSnapshot) {                    likeReference.child("Likes").push().child("likedId").setValue(_currentUser).addOnCompleteListener(new OnCompleteListener<Void>() {                        @Override                        public void onComplete(@NonNull Task<Void> task) {                            if (task.isSuccessful()) {                                Log.d("like", "onComplete: " + "like eklendi");                            }                        }                    });                }                @Override                public void onCancelled(@NonNull DatabaseError databaseError) {                }            });        }    }    public void setLikedVisibility(String _major, String _lessonKey,String query)    {        final ImageView not_like = (ImageView)findViewById(R.id.like);        final ImageView liked = (ImageView)findViewById(R.id.liked);        final TextView likeCount =(TextView)findViewById(R.id.likeCount);        final TextView likedCount =(TextView)findViewById(R.id.likedCount);        final DatabaseReference likeReference = FirebaseDatabase.getInstance().getReference().child(_major)                .child(query).child(_lessonKey).child("Likes");        likeReference.addValueEventListener(new ValueEventListener() {            @Override            public void onDataChange(@NonNull DataSnapshot dataSnapshot)            {                if (dataSnapshot.getChildrenCount()>0)                {                    for (DataSnapshot ds : dataSnapshot.getChildren())                    {                        if (ds.child("likedId").getValue().toString().equals(current_user))                        {                            Log.d("exit", "onDataChange: "+current_user);                            not_like.setVisibility(View.INVISIBLE);                            liked.setVisibility(View.VISIBLE);                        }                        else                        {                            not_like.setVisibility(View.VISIBLE);                            liked.setVisibility(View.INVISIBLE);                        }                    }                    likedCount.setVisibility(View.GONE);                    likeCount.setText(Long.toString(dataSnapshot.getChildrenCount())+" kişi beğendi" );                    likeCount.setVisibility(View.VISIBLE);                }                else                {                    not_like.setVisibility(View.VISIBLE);                    liked.setVisibility(View.GONE);                    likedCount.setVisibility(View.VISIBLE);                    likeCount.setVisibility(View.GONE);                }            }            @Override            public void onCancelled(@NonNull DatabaseError databaseError) {            }        });    }    public void deleteLiked(String _major, String _lessonKey,String query)    {        final ImageView not_like = (ImageView)findViewById(R.id.like);        final ImageView liked = (ImageView)findViewById(R.id.liked);        final TextView likeCount =(TextView)findViewById(R.id.likeCount);        final TextView likedCount =(TextView)findViewById(R.id.likedCount);        final DatabaseReference likeReference = FirebaseDatabase.getInstance().getReference().child(_major)                .child(query).child(_lessonKey).child("Likes");        likeReference.addListenerForSingleValueEvent(new ValueEventListener() {            @Override            public void onDataChange(@NonNull DataSnapshot dataSnapshot) {                if (dataSnapshot.getChildrenCount()>0)                {                    for (DataSnapshot ds : dataSnapshot.getChildren())                    {                        if (ds.child("likedId").getValue().toString().equals(current_user))                        {                            Log.d("exit", "onDataChange: "+current_user);                            ds.getKey();                            likeReference.child(ds.getKey()).removeValue();                        }                    }                    likedCount.setVisibility(View.GONE);                    likeCount.setText(Long.toString(dataSnapshot.getChildrenCount())+" kişi beğendi" );                    likeCount.setVisibility(View.VISIBLE);                }                else                {                    not_like.setVisibility(View.VISIBLE);                    liked.setVisibility(View.GONE);                    likedCount.setVisibility(View.VISIBLE);                    likeCount.setVisibility(View.GONE);                }            }            @Override            public void onCancelled(@NonNull DatabaseError databaseError) {            }        });    }    public void setCommentVisibility(String _major, String _lessonKey,String query)    {        final ImageView commentImageDefault = (ImageView)findViewById(R.id.commentClickdefault);        final TextView commentCountDefeault =(TextView)findViewById(R.id.commentCountdefult);        final TextView commentCount =(TextView)findViewById(R.id.comemntCount);        final ImageView commentClick =(ImageView)findViewById(R.id.commentClick);        final DatabaseReference likeReference = FirebaseDatabase.getInstance().getReference().child(_major)                .child(query).child(_lessonKey).child("comments");        likeReference.addValueEventListener(new ValueEventListener() {            @Override            public void onDataChange(@NonNull DataSnapshot dataSnapshot)            {                if (dataSnapshot.getChildrenCount()>0)                {                    commentClick.setVisibility(View.VISIBLE);                    commentCountDefeault.setVisibility(View.GONE);                    commentImageDefault.setVisibility(View.GONE);                    commentCount.setVisibility(View.VISIBLE);                    commentCount.setText(Long.toString(dataSnapshot.getChildrenCount())+" tane yorum " );                }                else                {                    commentCountDefeault.setVisibility(View.VISIBLE);                    commentImageDefault.setVisibility(View.VISIBLE);                    commentCount.setVisibility(View.GONE);                    commentClick.setVisibility(View.GONE);                }            }            @Override            public void onCancelled(@NonNull DatabaseError databaseError) {            }        });    }    private void getNotes( final String major ,final  String key)    {        final Query postReference= FirebaseDatabase.getInstance().getReference().child(major).child(query).child(key).child("data");        FirebaseRecyclerOptions<Notes> options = new FirebaseRecyclerOptions.Builder<Notes>()                .setQuery(postReference,Notes.class)                .setLifecycleOwner(this)                .build();        FirebaseRecyclerAdapter <Notes,NotesViewHolder> adapter=  new FirebaseRecyclerAdapter<Notes, NotesViewHolder>(options) {                    @Override                    protected void onBindViewHolder(@NonNull NotesViewHolder holder, final int position, @NonNull final Notes model) {                        holder.setDatas(model.getImage());                        Log.d("images_bind", "onBindViewHolder: "+model.getImage());                       images.add(model.getImage());                        holder.view.findViewById(R.id.datas).setOnClickListener(new View.OnClickListener() {                            @Override                            public void onClick(View view) {                                final Intent i = new Intent(SingleLessonsPostActivity.this,AllFilesActivity.class);                                i.putExtra("major",major);                                i.putExtra("key",getIntent().getStringExtra("key"));                                i.putExtra("currentUser",current_user);                                i.putExtra("query",query);                                startActivity(i);                               if (images.size()>0) {                                   i.putExtra("list", images);                                   i.putExtra("key", getRef(position).getKey().toString());                                   finish();                               }                            }                        });                    }                    @NonNull                    @Override                    public NotesViewHolder onCreateViewHolder(@NonNull ViewGroup viewGroup, int i) {                       View view = LayoutInflater.from(viewGroup.getContext())                               .inflate(R.layout.single_lesson_post_view_holder,viewGroup,false);                        return new NotesViewHolder(view);                    }                };    //    notes.setAdapter(adapter);    }    public void clickView(View view)    {        final Intent i = new Intent(SingleLessonsPostActivity.this,AllFilesActivity.class);        i.putExtra("major",major);        i.putExtra("key",getIntent().getStringExtra("key"));        i.putExtra("currentUser",current_user);        i.putExtra("query",query);        startActivity(i);    }    public class NotesViewHolder extends RecyclerView.ViewHolder    {        View view;        public NotesViewHolder(@NonNull View itemView)        {            super(itemView);            view=itemView;        }        public void setDatas(String url)        {            final ProgressBar progressbar = (ProgressBar)itemView.findViewById(R.id.progressbar) ;            ImageView view = (ImageView)itemView.findViewById(R.id.datas);            Picasso.get().load(url).resize(150,150).centerCrop().placeholder(R.drawable.images).into(view, new Callback() {                @Override                public void onSuccess()                {                    progressbar.setVisibility(View.GONE);                }                @Override                public void onError(Exception e)                {                    Log.e("error_bind", "onError: ",e.getCause() );                }            });        }    }    private void sendLike(String key, final String current_user)    {        DatabaseReference  reference = FirebaseDatabase.getInstance().getReference().child("NotificationSettings").child(userid);        reference.addListenerForSingleValueEvent(new ValueEventListener() {            @Override            public void onDataChange(@NonNull DataSnapshot dataSnapshot)            {                if (dataSnapshot.child("like").exists())                {                    if (dataSnapshot.child("like").getValue().toString().equals("true"))                    {                        final DatabaseReference notification = FirebaseDatabase.getInstance().getReference().child("Notification").child(userid).push();                        final HashMap<String,String> newNotification = new HashMap<>();                        DatabaseReference databaseReference = FirebaseDatabase.getInstance().getReference().child("Students").child(current_user);                        databaseReference.addValueEventListener(new ValueEventListener() {                            @Override                            public void onDataChange(@NonNull DataSnapshot dataSnapshot)                            {                                newNotification.put("name",dataSnapshot.child("name").getValue().toString());                                newNotification.put("send", current_user);                                newNotification.put("type","Senin Gönderini Beğendi");                                newNotification.put("title","BEĞENİ");                                notification.setValue(newNotification).addOnCompleteListener(new OnCompleteListener<Void>() {                                    @Override                                    public void onComplete(@NonNull Task<Void> task) {                                        if (task.isSuccessful())                                            Log.d("yeni bir beğeni", "onComplete: "+"beğeni bildirimi gönderildi");                                        else Log.w("hata", "onComplete: ",task.getException() );                                    }                                });                            }                            @Override                            public void onCancelled(@NonNull DatabaseError databaseError) {                            }                        });                    }                    else if (dataSnapshot.child("like").getValue().toString().equals("false")) return;                }            }            @Override            public void onCancelled(@NonNull DatabaseError databaseError) {            }        });    }    private void sendComment(final String key, final String current_user)    {        String comment = comment_editText.getText().toString();        if (!TextUtils.isEmpty(comment))        {            String sendTime = String.valueOf(-1*Calendar.getInstance().getTimeInMillis());          HashMap<String,String> timeMap = new HashMap();            timeMap.put("sendTime",sendTime);            DatabaseReference reference=FirebaseDatabase.getInstance().getReference().child(major).child(query).child(key).child("comments").push();            Map messageMap = new HashMap();            messageMap.put("comment",comment);            messageMap.put("from",current_user);            Log.d("currennnntuser", "sendComment: "+current_user);            messageMap.put("sendTime",sendTime);            reference.setValue(messageMap).addOnCompleteListener(new OnCompleteListener<Void>() {                @Override                public void onComplete(@NonNull Task<Void> task) {                    if (task.isSuccessful())                    {                        comment_editText.setText("");                    }                }            });            DatabaseReference databaseReference = FirebaseDatabase.getInstance().getReference().child("NotificationSettings").child(userid);            databaseReference.addListenerForSingleValueEvent(new ValueEventListener() {                @Override                public void onDataChange(@NonNull DataSnapshot dataSnapshot)                {                    if (dataSnapshot.child("comment").exists())                    {                        if (dataSnapshot.child("comment").getValue().toString().equals("true"))                        {                            final DatabaseReference notification = FirebaseDatabase.getInstance().getReference().child("Notification").child(userid).push();                            final HashMap<String,String> newNotification = new HashMap<>();                            DatabaseReference databaseReference = FirebaseDatabase.getInstance().getReference().child("Students").child(current_user);                            databaseReference.addValueEventListener(new ValueEventListener() {                                @Override                                public void onDataChange(@NonNull DataSnapshot dataSnapshot)                                {                                    {                                        senderName=dataSnapshot.child("name").getValue().toString();                                        newNotification.put("name",dataSnapshot.child("name").getValue().toString());                                        newNotification.put("send", userid);                                        newNotification.put("type","Senin Gönderine Yorum Yaptı");                                        newNotification.put("title","YORUM");                                        notification.setValue(newNotification).addOnCompleteListener(new OnCompleteListener<Void>() {                                            @Override                                            public void onComplete(@NonNull Task<Void> task) {                                                getRandomString(20);                                                setDatabaseNotification(current_user, key, userid, senderName, "Senin Gönderine Yorum Yaptı", major, pushId, _lessonName, "YORUM", query, userid, count);                                            }                                        });                                    }                                }                                @Override                                public void onCancelled(@NonNull DatabaseError databaseError) {                                }                            });                        }                        else if (dataSnapshot.child("comment").getValue().toString().equals("false"))                        {                            final DatabaseReference notification = FirebaseDatabase.getInstance().getReference().child("Notification").child(userid).push();                            final HashMap<String,String> newNotification = new HashMap<>();                            DatabaseReference databaseReference = FirebaseDatabase.getInstance().getReference().child("Students").child(current_user);                            databaseReference.addValueEventListener(new ValueEventListener() {                                @Override                                public void onDataChange(@NonNull DataSnapshot dataSnapshot)                                {                                    {                                        senderName=dataSnapshot.child("name").getValue().toString();                                                getRandomString(20);                                                setDatabaseNotification(current_user, key, userid, senderName, "Senin Gönderine Yorum Yaptı", major, pushId, _lessonName, "YORUM", query, userid, count);                                            }                                }                                @Override                                public void onCancelled(@NonNull DatabaseError databaseError) {                                }                            });                        }                    }                }                @Override                public void onCancelled(@NonNull DatabaseError databaseError) {                }            });        }    }    private void setCommentLayout(String ref)    {        final DatabaseReference commentRef = FirebaseDatabase.getInstance().getReference().child(major).child(query).child(ref).child("comments");        commentRef.addChildEventListener(new ChildEventListener() {            @Override            public void onChildAdded(@NonNull DataSnapshot dataSnapshot, @Nullable String s) {                CommentHelper helper = dataSnapshot.getValue(CommentHelper.class);                comment.add(helper);                commentAdapter.notifyDataSetChanged();                commentRec.scrollToPosition(comment.size()-1);               //commentRef.child(dataSnapshot.getKey()).removeValue();            }            @Override            public void onChildChanged(@NonNull DataSnapshot dataSnapshot, @Nullable String s) {            }            @Override            public void onChildRemoved(@NonNull DataSnapshot dataSnapshot) {            }            @Override            public void onChildMoved(@NonNull DataSnapshot dataSnapshot, @Nullable String s) {            }            @Override            public void onCancelled(@NonNull DatabaseError databaseError) {            }        });    }    private void setupRecyclerView(RecyclerView view)    {        swipeController= new SwipeController(new SwipeControllerActions() {            @Override            public void onRightClicked(int position)            {                commentAdapter.commentHelpers.remove(position);                commentAdapter.notifyItemRemoved(position);                commentAdapter.notifyItemRangeChanged(position,commentAdapter.getItemCount());                super.onRightClicked(position);            }        });        ItemTouchHelper itemTouchhelper = new ItemTouchHelper(swipeController);        itemTouchhelper.attachToRecyclerView(view);        view.addItemDecoration(new RecyclerView.ItemDecoration() {            @Override            public void onDraw(Canvas c, RecyclerView parent, RecyclerView.State state) {                swipeController.onDraw(c);            }        });    }    public void setDatabaseNotification(String _currentUserID, String _lessonKey, final String _getterUserId, String _username            , String _type, final String _major, final String _pushId, String _lessonName, String _title            , String _query,String _userId,long _count)    {        DatabaseReference reference = FirebaseDatabase.getInstance().getReference().child(_major).child("databaseNotifications")                .child(_getterUserId).child("AllNotification");        HashMap<String , Object >map = new HashMap<>();        map.put("key",_pushId);        map.put("type",_type);        map.put("sender",_username);        map.put("senderUid",_currentUserID);        map.put("lessonKey",_lessonKey);        map.put("lessonName",_lessonName);        map.put("title",_title);        map.put("query",_query);        map.put("seen","false");        map.put("userId",_userId);        map.put("count",_count);        map.put("getterUid",_userId);        map.put("time",-1*Calendar.getInstance().getTimeInMillis());        reference.push().setValue(map).addOnCompleteListener(new OnCompleteListener<Void>() {            @Override            public void onComplete(@NonNull Task<Void> task) {                if (task.isSuccessful())                {                    Log.d("databaseNotification", "onComplete: "+"Eklendi ");                    DatabaseReference reference = FirebaseDatabase.getInstance().getReference().child(_major).child("databaseNotifications")                            .child(_getterUserId).child("NotificationCount");                    reference.child(_pushId).child("New Notification").setValue("yeni").addOnCompleteListener(new OnCompleteListener<Void>() {                        @Override                        public void onComplete(@NonNull Task<Void> task)                        {                            if (task.isSuccessful())                            {                                Log.d("notificationCount", "onComplete: "+"Eklendi ");                                return;                            }                            else                                Log.w("notificationCount", "onComplete: ",task.getException() );                        }                    });                }                else                    Log.w("databaseNotification", "onComplete: ",task.getException() );            }        });    }    private  String getRandomString(final int sizeOfRandomString)    {        final Random random=new Random();        final StringBuilder sb=new StringBuilder(sizeOfRandomString);        for(int i=0;i<sizeOfRandomString;++i)            sb.append(ALLOWED_CHARACTERS.charAt(random.nextInt(ALLOWED_CHARACTERS.length())));        Log.d("randomStrign", "getRandomString: "+sb.toString());        pushId=sb.toString();        return sb.toString();    }    @Override    public void onBackPressed()    {        super.onBackPressed();        if (contextIntent==null)        {            Intent main = new Intent(SingleLessonsPostActivity.this, MainActivity.class);            main.putExtra("major",major);           // notificitaion.putExtra("current_user",current_user);            startActivity(main);            return;        }        else{            if (contextIntent.equals("Notification.java"))            {                Intent notificitaion = new Intent(SingleLessonsPostActivity.this, NotificationActivity.class);                notificitaion.putExtra("major",major);                notificitaion.putExtra("current_user",current_user);                startActivity(notificitaion);                finish();            }            else {                return;            }        }    }}